package com.oigoiania.fragments;

import java.util.List;

import android.content.Context;
import android.content.Intent;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.RotateAnimation;
import android.widget.ImageView;
import android.widget.TextView;

import com.br.oigoiania.R;
import com.crittercism.app.Crittercism;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnCameraChangeListener;
import com.google.android.gms.maps.MapView;
import com.google.android.gms.maps.MapsInitializer;
import com.google.android.gms.maps.UiSettings;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.oigoiania.logger.Logger;
import com.oigoiania.parsers.MyDataHolder;
import com.oigoiania.util.GlobalFunctions;
import com.oigoiania.util.Util;

public class SpecificGoogleMapviewFragment extends Fragment implements
		OnClickListener {
	private GoogleMap mMap;
	private float previousBearing = 0;
	protected static final String tag = "SpecificGoogleMapviewFragment";
	private MyDataHolder dataholder;
	private TextView distance;
	private TextView standred_btn, satallite_btn;
	Intent intent;

	MapView m;
	private ImageView arrowIimage = null;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		Bundle bundle = getArguments();
		dataholder = (MyDataHolder) bundle.getSerializable("poi");
		if (dataholder == null)
			throw new NullPointerException(
					"SpecificGoogleMapviewFragment: data sent is null");
		try {
			MapsInitializer.initialize(this.getActivity());
		} catch (GooglePlayServicesNotAvailableException e) {
			Crittercism.logHandledException(e);
			e.printStackTrace();
		}
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View v = inflater.inflate(R.layout.specifice_mapview, container, false);
		m = (MapView) v.findViewById(R.id.mapView);
		distance = (TextView) v.findViewById(R.id.distance_txtview);
		standred_btn = (TextView) v.findViewById(R.id.standerd_button);
		satallite_btn = (TextView) v.findViewById(R.id.satallite_button);
		arrowIimage = (ImageView) v.findViewById(R.id.image_arrow);
		standred_btn.setOnClickListener(this);
		satallite_btn.setOnClickListener(this);
		m.onCreate(savedInstanceState);
		loadMap();
		return v;

	}

	@Override
	public void onResume() {
		super.onResume();
		m.onResume();
		// setupMap();

	}

	@Override
	public void onPause() {

		super.onPause();

		m.onPause();

	}

	@Override
	public void onDestroy() {

		super.onDestroy();

		m.onDestroy();

	}

	@Override
	public void onLowMemory() {

		super.onLowMemory();

		m.onLowMemory();

	}

	// Maps is initialized and Set the Marker.
	public void loadMap() {
		mMap = m.getMap();
		// adding the Marker to the Google map
		mMap.addMarker(new MarkerOptions()
				.position(
						new LatLng(dataholder.getLoc_latitude(), dataholder
								.getLoc_longitude()))
				.title(dataholder.getLoc_title() != null ? dataholder
						.getLoc_title() : dataholder.getName())
				.icon(BitmapDescriptorFactory
						.fromResource(R.drawable.marker_1234)));
		/*
		 * mMap.addMarker(new MarkerOptions() .position(new
		 * LatLng(-16.677224,-49.267698)) .title("text")
		 * .icon(BitmapDescriptorFactory
		 * .fromResource(R.drawable.marker_1234)));
		 */

		mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
			LayoutInflater inflater = (LayoutInflater) getActivity()
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			private final View window = inflater.inflate(
					R.layout.custom_infowindow, null);

			@Override
			public View getInfoWindow(Marker marker) {

				String title = marker.getTitle();
				TextView txtTitle = ((TextView) window
						.findViewById(R.id.title_txtview));
				if (title != null) {
					Logger.d(tag, " Title Name:" + title.toString());
					txtTitle.setText(title);
				} else {
					txtTitle.setText("");
				}
				return window;
			}

			@Override
			public View getInfoContents(Marker arg0) {
				// TODO Auto-generated method stub
				return null;
			}
		});
		mMap.setOnCameraChangeListener(new OnCameraChangeListener() {

			@Override
			public void onCameraChange(CameraPosition position) {
				Logger.d(tag, "Camera is rotated: " + position.bearing);
				animateArrow(position.bearing);

			}
		});

		// mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(
		// -16.660846, -49.279111), 13.0f));
		mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(
				new LatLng(Util.currentLocation.getLatitude(),
						Util.currentLocation.getLongitude()), 13.0f));

		// for enabling/disenabling the View // compass,zoomView, User Location
		UiSettings obj = mMap.getUiSettings();
		obj.setZoomControlsEnabled(false);
		obj.setCompassEnabled(true);
		mMap.setMyLocationEnabled(true);
		Location desiredLocation = new Location(LocationManager.GPS_PROVIDER);
		desiredLocation.setLatitude(dataholder.getLoc_latitude());
		desiredLocation.setLongitude(dataholder.getLoc_longitude());
		Logger.d(tag, "Latitude :" + dataholder.getLoc_latitude()
				+ "Logitude : " + dataholder.getLoc_longitude());
		distance.setText("Distância :"
				+ GlobalFunctions.formatDistance(GlobalFunctions
						.distanceFrom(desiredLocation)));

		// for the user Current location to calculate the The Angle between the
		// current and Marker position
		Location desiredLocation2 = new Location(LocationManager.GPS_PROVIDER);
		desiredLocation.setLatitude(Util.currentLocation.getLatitude());
		desiredLocation.setLongitude(Util.currentLocation.getLongitude());
		animateArrow(desiredLocation.bearingTo(desiredLocation2));
		// List<MyDataHolder> markerlist = new ArrayList<MyDataHolder>();
		// markerlist.add(dataholder);
		// fitZoomAndPositionToMapByMarkers(markerlist);
	}

	public void fitZoomAndPositionToMapByMarkers(List<MyDataHolder> markerlist) {

		int minLat = Integer.MAX_VALUE;
		int maxLat = Integer.MIN_VALUE;
		int minLon = Integer.MAX_VALUE;
		int maxLon = Integer.MIN_VALUE;

		for (MyDataHolder item : markerlist) {

			int lat = (int) (item.getLoc_latitude() * 1E6);
			int lon = (int) (item.getLoc_longitude() * 1E6);

			maxLat = Math.max(lat, maxLat);
			minLat = Math.min(lat, minLat);
			maxLon = Math.max(lon, maxLon);
			minLon = Math.min(lon, minLon);
		}

		double latitudeToGo = (maxLat + minLat) / 1E6 / 2;
		double longitudeToGo = (maxLon + minLon) / 1E6 / 2;
		// LatLng toCenter = new LatLng(latitudeToGo, longitudeToGo);

		// centerCameraToProperPosition(toCenter);

		LatLng southWestLatLon = new LatLng(minLat / 1E6, minLon / 1E6);
		LatLng northEastLatLon = new LatLng(maxLat / 1E6, maxLon / 1E6);

		zoomInUntilAllMarkersAreStillVisible(southWestLatLon, northEastLatLon);
	}

	private void zoomInUntilAllMarkersAreStillVisible(
			final LatLng southWestLatLon, final LatLng northEastLatLon) {

		mMap.setOnCameraChangeListener(new OnCameraChangeListener() {

			@Override
			public void onCameraChange(CameraPosition arg0) {

				mMap.moveCamera(CameraUpdateFactory.newLatLngBounds(
						new LatLngBounds(southWestLatLon, northEastLatLon), 50));
				mMap.setOnCameraChangeListener(null);

			}
		});

	}

	@Override
	public void onClick(View v) {
		if (v.getId() == R.id.standerd_button) {
			mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);

		} else if (v.getId() == R.id.satallite_button) {
			mMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
		}
	}

	// this Method Rotate the Image According to the map Rotation to the Current
	// postioon
	private void animateArrow(float bearingRelative) {
		if (arrowIimage != null) {
			RotateAnimation an = new RotateAnimation(-previousBearing,
					-bearingRelative, Animation.RELATIVE_TO_SELF, 0.5f,
					Animation.RELATIVE_TO_SELF, 0.5f);
			previousBearing = bearingRelative;
			an.setDuration(500);
			an.setRepeatCount(0);
			an.setFillAfter(true);
			arrowIimage.startAnimation(an);
		}
	}

}
